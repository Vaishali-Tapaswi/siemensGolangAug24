Lab4, Lab5 - accept a function as input and return function as output(with closures)
      Lab4
            package main
            import "fmt"
            func main(){
                  no1 := process(add)
                  fmt.Println(no1)
            }
            func add(a, b int ) int{
                  fmt.Println("Lab4.go - add function ")
                  return a+b
            }
            
            func process(fn func(a,b int)int ) int {
                  fmt.Println("process in invoked with function as parameter ")
                  // this process function is common for accepting two inputs and giving output
                  return fn(1000,100)
            }
      Lab5 - 
            package main
            import "fmt"
            func main(){
            	fp := process()
            	no1:=fp(10)
            	fmt.Println("No1 = "  , no1)
            	no1=fp(5)
            	fmt.Println("No1 = "  , no1)
            	no1=fp(15)
            	fmt.Println("No1 = "  , no1)
            }
             func process() (func(int)int )  {
            	sum := 0
            	return func (x int)int{
            		fmt.Println("in func where sum =  "  , sum);
            		sum = sum + x
            		return sum;
            	}
            }
             
Lab3 - function in different file 
      Write Lab3 code to print sum of two variables using add function
                  func add(a, b int ) int{
            	fmt.Println("Helper1.go - add function ")
            	return a+b
                  }      
      run it where add and main function both are in same Lab3.go
      create Helper.go which has add function in same package, delete add function from Lab3.go
      cmd>go run Lab3.go 
                  check error
      cmd>go run Lab3.go Helper.go
      Write one more function sub to return subtraction and invoke it from Lab3 
      Modify Helper.go to have single function to return two values sum, sub and invoke the same from Lab3

Lab2 - Accept two input arguments and show sum 
      input args on command line - package os, variable Args 
      Convert string to int - package strconv, method - Atoi 
      Observe errors 
           -> use a package without import 
           -> multiple declarations using := 
           -> declare a variable and not use it 
           -> run the code without passing any argument / wrong datatype

Lab1- Visual Studio Code, Exetions-go
      go installation (https://go.dev/doc/install)
      cmd>go version -> > 1.2 
      create a folder and demo1 subfolder
      create Lab1.go 
          package main
          import "fmt"
          func main() {
              fmt.Println("Hello, World")
          }
     cmd>go run Lab1.go 
