Lab6 - create a folder Demo8 
	two subfolder -> dblib, web 
	code in dblib 
		package dblib
		import(
			"database/sql"
			_ "github.com/go-sql-driver/mysql"
			"strconv"
			"fmt"
		)
		// Dept represents the structure of a department
		type Dept struct {
		    Deptno int    `json:"deptno"`
		    Dname  string `json:"dname"`
		    Loc    string `json:"loc"`
		}
		func Add(dept Dept){
			db, _ := sql.Open("mysql", "admin:MyPassword@tcp(mydb.ctu244mmwtr1.us-east-1.rds.amazonaws.com:3306)/mydatabase1")
			defer db.Close()
			sqlstring:= "insert into dept values (" + strconv.Itoa(dept.Deptno) +",'" + dept.Dname + "','" + dept.Loc+ "')"
			fmt.Println("Add-Dept  " , sqlstring)
			result, _:= db.Exec(sqlstring)
			rows,_:=result.RowsAffected()
			fmt.Println("Rows affected " , rows)
		}
	code in web 
		package main
		import (
		    "encoding/json"
		    "fmt"
		    "net/http"
		    "dblib"
		)
		type DeptHandler struct{} 
		// ServeHTTP handles GET and POST requests
		func (my *DeptHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
		    w.Header().Set("Content-Type", "application/json")
		    switch r.Method {
		    case "GET":
		        // Marshal the slice of departments to JSON
		        /*
		        data, err := json.Marshal(departments)
		        if err != nil {
		            http.Error(w, err.Error(), http.StatusInternalServerError)
		            return
		        }*/
		        // Write the JSON data to the response
		        w.WriteHeader(http.StatusOK)
		        
		 
		    case "POST":
		        // Create a new Dept instance
		        var newDept dblib.Dept
		 
		        // Decode the JSON request body into the newDept
		        err := json.NewDecoder(r.Body).Decode(&newDept)
		        if err != nil {
		            http.Error(w, err.Error(), http.StatusBadRequest)
		            return
		        }
		 
		        // Add the new department to db 
		        dblib.Add(newDept)
		 
		        // Log the current departments slice
		        fmt.Println("Updated departments in db")
		 
		        // Send a success response
		        w.WriteHeader(http.StatusCreated)
		        json.NewEncoder(w).Encode(newDept)
		    }
		}
		 
		func main() {
		    http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		        fmt.Fprintf(w, "<h1>Hello World</h1>")
		    })
		 
		    // Dept handler
		    http.Handle("/dept", new(DeptHandler))
		 
		    // Start the server
		    fmt.Println("Starting server on :8080")
		    http.ListenAndServe(":8080", nil)
		}
	follow steps similar to Lab5 (module usage )
	-> complete get request to retrieve data as json 
	
Lab5 -  Create a library/Module
	create a folder Demo7
		two subfolder -> calc, usecalc
		in calc
			demo.go
				package calc
				func Add(n1 int, n2 int) int {
					return n1+ n2
				}
			demo1.go
				package calc
				func Divide(n1 int, n2 int) int {
					return n1/n2
				}
			calc>go mod init fands.com/calc
			calc>go mod tidy
		in usecalc
			Lab1.go
				package main
				import (
					"fmt"
					"fands.com/calc"
					)
				func main(){
				   ans := calc.Add(10,20)
				   fmt.Println("Sum = ", ans)
				   ans = calc.Divide(50,10)
				   fmt.Println("Divide = ", ans)
				}
			usecalc>go mod init demo9
			usecalc>go mod tidy
				-> check error
			usecalc>go mod edit -replace fands.com/calc=../calc
			usecalc>go mod tidy
			usecalc>go run Lab1.go

Lab4- http server - get / post - json
        package main
        
        import (
        	"fmt"
        	"net/http"
        )
        type Dept struct {
        	Deptno int
        	Dname string
        	Loc string
        }
        // create slice of Dept 
        func (my *Dept) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        	fmt.Fprintf(w, "<h1>Dept Handler</h1>")
        	switch r.Method {
        		case "GET":
        			fmt.Fprintf(w, "<h1>Get Requestfor Dept</h1>")
        			// return slice of departments
        				// slice -> marshal -> string 
        		case "POST":
        			fmt.Fprintf(w, "<h1>Post Requestfor Dept</h1>")
        			// process json input and create dept object
        				// unmarshal, show dept 
        				// add to slice // show slice on fmt.Println
        		}
        func main() {
        	
        	http.HandleFunc("/",
        		func(w http.ResponseWriter, r *http.Request) {
        			fmt.Fprintf(w, "<h1>Hello World</h1>")
        		})
        	http.Handle("/dept", new(Dept))
        	fmt.Println("Starting server on 8080 ")
        	http.ListenAndServe(":8080", nil)
        }

Lab3 - http Server 
        package main
        
        import (
        	"fmt"
        	"net/http"
        )
        type MyHandler struct {
        }
        func (my *MyHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        	fmt.Fprintf(w, "<h1>First Handler</h1>")
        }
        func main() {
        	
        	http.HandleFunc("/",
        		func(w http.ResponseWriter, r *http.Request) {
        			fmt.Fprintf(w, "<h1>Hello World</h1>")
        			fmt.Fprintf(w, "Method %s", r.Method)
        		})
        	http.Handle("/first", new(MyHandler))
        	fmt.Println("Starting server on 8080 ")
        	http.ListenAndServe(":8080", nil)
        }
        Write two methods -> get -> just a message of get request invoked
                             post ->just a message of post request invoked
Lab2 - create new folder, mod init, tidy, create database, table
        package main

        import (
        	"database/sql"
        	_ "github.com/lib/pq"
        	"fmt"
        	)
        func main(){
        	connStr := "postgres://postgres:postgres@localhost/mydb?sslmode=disable"
        	db, err := sql.Open("postgres", connStr)
        	
        	fmt.Println(db, err)
        	defer db.Close()
        	result, err:= db.Exec("insert into dept values (2,'Fin', 'Hyd')")
        	fmt.Println(result, err)
        	rows,err:=result.RowsAffected()
        	fmt.Println(rows)
        	}
        -> show all rows ->sql ->query

Lab1 - 
        Create a folder Demo5\mysql
            create Lab1.go 
                 package main

                import (
                        "database/sql"
                        _ "github.com/go-sql-driver/mysql"
                        "fmt"
                        )
                func main(){
                        
                        db, err := sql.Open("mysql", "admin:MyPassword@tcp(mydb.ctu244mmwtr1.us-east-1.rds.amazonaws.com:3306)/mydatabase1")
                        fmt.Println(db, err)
                        defer db.Close()
                        result, err:= db.Exec("insert into dept values (2,'Fin', 'Hyd')")
                        fmt.Println(result, err)
                        rows,err:=result.RowsAffected()
                        fmt.Println(rows)
                        }

    create a module, tidy 
    see basic information on db 

    2. Replace sql driver with Postgres
        run -> check errors, create database, check error, create table 
